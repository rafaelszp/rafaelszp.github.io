"use strict";(self.webpackChunkrafaelszp_github_io=self.webpackChunkrafaelszp_github_io||[]).push([[1326],{5665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(4848),r=n(8453);const a={title:"Uploading multipart/form-data in Java: The right way to do it",date:"2021-10-01",categories:["javaee"]},o=void 0,s={permalink:"/blog/2021/10/01/2021/10/uploading-multipart-form-data-in-java-the-right-way-to-do-it",editUrl:"https://github.com/rafaelszp/rafaelszp.github.io/tree/master/blog/blog/2021/10/2021-10-01-uploading-multipart-form-data-in-java-the-right-way-to-do-it/index.md",source:"@site/blog/2021/10/2021-10-01-uploading-multipart-form-data-in-java-the-right-way-to-do-it/index.md",title:"Uploading multipart/form-data in Java: The right way to do it",description:"With Unirest:",date:"2021-10-01T00:00:00.000Z",tags:[],readingTime:.81,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Uploading multipart/form-data in Java: The right way to do it",date:"2021-10-01",categories:["javaee"]},unlisted:!1,prevItem:{title:"POSTGRESQL: Get connection usage",permalink:"/blog/2021/11/08/2021/11/postgresql-get-connection-usage"},nextItem:{title:"Listing Windows processes with command line arguments",permalink:"/blog/2021/08/23/2021/08/listing-windows-processes-with-command-line-arguments"}},l={authorsImageUrls:[]},p=[{value:"With Unirest:",id:"with-unirest",level:2},{value:"With OkHttp",id:"with-okhttp",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"with-unirest",children:"With Unirest:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'\nimport kong.unirest.ContentType;\nimport kong.unirest.HttpResponse;\nimport kong.unirest.Unirest;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.nio.charset.StandardCharsets;\n\npublic class UnirestTest {\n\n  public static void main(String[] args) throws Exception {\n\n    final File file = new File("/home/rafael/tmp/file-sample.pdf");\n    final FileInputStream input = new FileInputStream(file);\n    HttpResponse<String> response = Unirest.post("https://httpbin.org:80/post")\n      .header("Authorization", "Bearer my_token")\n      .header("Accept","*/*")\n      .field("file", input, ContentType.create("application/pdf"), "file")\n      .asString();\n\n    System.out.println("response = " + response.getStatus());\n    System.out.println(response.getBody());\n  }\n\n\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Dependency used"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:" <dependency>\n      <groupId>com.konghq</groupId>\n      <artifactId>unirest-java</artifactId>\n      <version>3.12.0</version>\n    </dependency>\n"})}),"\n",(0,i.jsx)(t.h2,{id:"with-okhttp",children:"With OkHttp"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import okhttp3.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\n\npublic class OKTest {\n\n  static Logger logger = LoggerFactory.getLogger(OKTest.class);\n\n  public static void main(String[] args) throws Exception{\n\n\n    OkHttpClient client = new OkHttpClient().newBuilder().build();\n\n    RequestBody requestBody = new MultipartBody.Builder()\n      .setType(MultipartBody.FORM)\n      .addFormDataPart("file", "file.pdf",\n        RequestBody.create(MediaType.parse("application/pdf"),\n          new File("/home/rafael/tmp/file-sample.pdf")))\n      .build();\n\n    Request request = new Request.Builder()\n      .url("https://httpbin.org/post")\n      .post(requestBody)\n      .addHeader("Authorization", "Bearer my_token")\n      .addHeader("Accept","*/*")\n      .addHeader("Accept-Encoding","gzip, deflate")\n      .build();\n\n    Call call = client.newCall(request);\n    Response response = call.execute();\n    final String body = new String(response.body().bytes());\n    System.out.printf("response code %s body %s\\n",response.code(), body);\n\n\n\n  }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Dependency used:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:" <dependency>\n      <groupId>com.squareup.okhttp3</groupId>\n      <artifactId>okhttp</artifactId>\n      <version>3.2.0</version>\n    </dependency>\n"})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(6540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);